load smt

mod DAM-CONTROLLER is
  protecting REAL-INTEGER . 
  protecting BOOL .
  
  sorts SpillwayId Aperture Spillway Spillways DamState .
  subsort Spillway < Spillways .
  
  --- We could declare IDs constants, but we'll use variables instead
  ops s1 s2 s3 : -> SpillwayId [ctor] .
  
  --- There are 4 kinds of apertures
  ops close open1 open2 open3 : -> Aperture [ctor] .
  
  --- Each spillway has an ID and an opening associated with it.
  op `[_`,_`] : SpillwayId Aperture -> Spillway [ctor] .
  
  --- Spillways are a multiset with identity empty
  op empty : -> Spillways [ctor] . 
  op __ : Spillways Spillways -> Spillways [ctor assoc comm id: empty] .

  
  --- DamState is a quadruple [spillways, volume, timestamp, apertureCommand]
  op `{_;_;_;_`} : Spillways Real Real Bool -> DamState .  
 
  var S : SpillwayId .   var O : Aperture .   var SC : Spillways .
  vars V1 V2 X Y INFLOW : Real .   vars T T' DELTA : Real .
   
  --- We define several rules so that if the apertureCommand flag is true, the opening of a spillway changes
  --- It can also happen (nocmd) that the configuration remains the same
  rl [openC-1] : { [S,close] SC ; V1 ; T ; true } 
                  => { [S,open1] SC ; V1 ; T ; false } [narrowing] .
  rl [open1-2] : { [S,open1] SC ; V1 ; T ; true } 
                  => { [S,open2] SC ; V1 ; T ; false } [narrowing] .
  rl [open2-3] : { [S,open2] SC ; V1 ; T ; true } 
                  => { [S,open3] SC ; V1 ; T ; false } [narrowing] .
  rl [close1-C] : { [S, open1] SC ; V1 ; T ; true } 
                  => { [S,close] SC ; V1 ; T ; false } [narrowing] .
  rl [close2-1] : { [S, open2] SC ; V1 ; T ; true } 
                  => { [S,open1] SC ; V1 ; T ; false } [narrowing] .
  rl [close3-2] : { [S, open3] SC ; V1 ; T ; true } 
                  => { [S,open2] SC ; V1 ; T ; false } [narrowing] .
  rl [nocmd] : { SC ; V1 ; T ; true } 
                  => { SC ; V1 ; T ; false } [narrowing] . 
  
  --- Spillway outflow depends on its opening position.
  op aperture : Aperture ~> Real .
  
  eq aperture(close) = 0/1 [variant] .      --- with aperture close: no outflow
  eq aperture(open1) = 200/1 [variant] .    --- with aperture open2: outflow constant rate 200 m3/min
  
  eq aperture(open2) = 400/1 [variant] .    --- with aperture open2: outflow constant rate 400 m3/min
  eq aperture(open3) = 1200/1 [variant] .   --- with aperture open2: outflow constant rate 800 m3/min
  
  --- Total outflow is the sum of the outflow of all the spillways
  op outflow : Spillways ~> Real .
    
  rl [outflow-base] : outflow(empty) => 0/1 [narrowing] .
  crl [outflow-recursive] : outflow([S,O] SC) => X + outflow(SC)
                                                  if aperture(O) = X [nonexec] .	                                       
  
  --- The following rule models the volume variation in time interval [T,T+DELTA] 
  --- depending on the outflow of the spillways and the inflow capacity
 
  crl [volume] :  { SC ; V1 ; T ; false } => { SC ; V2 ; T' ; true }  
                                          if outflow(SC) => Y /\ (V2 === ((V1 + INFLOW * DELTA) - (Y * DELTA)) and (T' === (T + DELTA))) = true [nonexec] .                                   
endm

eof 

--- Experiments commands
vu-narrow [,2] in DAM-CONTROLLER : { SWS:Spillways ; V:Real ; T:Real ; B:Bool } =>* St:DamState such that (true).Boolean .
vu-narrow [,4] in DAM-CONTROLLER : { SWS:Spillways ; V:Real ; T:Real ; B:Bool } =>* St:DamState such that (true).Boolean .
vu-narrow [,6] in DAM-CONTROLLER : { SWS:Spillways ; V:Real ; T:Real ; B:Bool } =>* St:DamState such that (true).Boolean .
