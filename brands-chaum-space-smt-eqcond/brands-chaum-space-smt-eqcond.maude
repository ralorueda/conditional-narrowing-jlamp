mod BRANDS-CHAUM is
  protecting META-LEVEL .
  protecting REAL-INTEGER .

  sort Msg NTMsg TMsg .

  --- XOR properties
  sort NNSet .  

  op null : -> NNSet .
  op _*_ : NNSet NNSet -> NNSet [assoc comm frozen] .

  vars X Y Z U V : [NNSet] .

  eq [idem] :     X * X = null    [variant] .
  eq [idem-Coh] : X * X * Z = Z [variant] .
  eq [id] :       X * null = X    [variant] .

  --- Nonce and secret operators
  sorts Name Honest Intruder Fresh Secret Nonce .
  subsorts NNSet < NTMsg < Msg .
  subsorts Nonce Secret < NNSet .
  subsort Name < Msg .
  subsort Honest Intruder < Name .

  ops a b : -> Honest .
  op i : -> Intruder .
  ops ra1 rb1 rb2 : -> Fresh .
  op n : Name Fresh -> Nonce [frozen] .
  op s : Name Fresh -> Secret [frozen] .

  --- Sign, concatenation, commit, open and yes operators
  op sign : Name NTMsg -> NTMsg .
  op _;_ : NTMsg  NTMsg  -> NTMsg [gather (e E) frozen] .
  op commit : Nonce Secret -> NTMsg .
  op open : Nonce Secret NTMsg -> NTMsg .
  op yes : -> NTMsg .

  --- Open commitment
  eq open(N1:Nonce,S1:Secret,commit(N1:Nonce,S1:Secret)) = yes [variant] . 
  
  --- Equational Conditions
  sort EqCond .
  op yes : -> EqCond .
  op _eq_ : Msg Msg -> EqCond .  
  
  --- Distance operator
  sorts CoordNameTime .
  
  op _:_,_,_,_ : Name Real Real Real Real -> CoordNameTime [prec 10] .

  --- Time operators
  sorts TimeInfo NameTime NameTimeSet .
  subsort NameTime < NameTimeSet .
  subsort TMsg < Msg .

  op _@_ : NTMsg TimeInfo -> TMsg [metadata "grammar-arg-1" format (d nis d d)] .
  op _:_ : Name Real -> NameTime .
  op mt : -> NameTimeSet .
  op _#_ : NameTimeSet NameTimeSet -> NameTimeSet [assoc comm id: mt] .
  op _->_ : CoordNameTime NameTimeSet -> TimeInfo .

  --- Sent message and sent message list
  sorts SMsg SMsgN SMsgE SMsgR SMsgList-eE SMsgList-Ee . 
  op + : Msg -> SMsg .

  op nileE : -> SMsgList-eE .
  op _,_ : SMsgR SMsgList-eE  -> SMsgList-eE [gather (e E)] .

  op nilEe : -> SMsgList-Ee .

  sorts SMsgListN-Ee SMsgListE-Ee SMsgListR-Ee . 
  subsort SMsg < SMsgN < SMsgE < SMsgR .
  op {_} : Boolean -> SMsgR .
  op {_} : EqCond -> SMsgE .
  op - : Msg -> SMsgN .


  subsort SMsgList-Ee < SMsgListN-Ee < SMsgListE-Ee < SMsgListR-Ee .
  op _,_ : SMsgListR-Ee SMsg -> SMsgList-Ee [gather (E e)] .
  op _,_ : SMsgListR-Ee SMsgN -> SMsgListN-Ee [gather (E e)] .
  op _,_ : SMsgListR-Ee SMsgE -> SMsgListE-Ee [gather (E e)] .
  op _,_ : SMsgListR-Ee SMsgR -> SMsgListR-Ee [gather (E e)] .

  --- Strand and strand data structures
  sorts Strand StrandSet .
  sorts StrandR StrandSetR .
  sorts StrandN StrandSetN .
  sorts StrandE StrandSetE .
  subsort Strand < StrandSet .
  subsort Strand < StrandN < StrandE < StrandR .
  subsort StrandR < StrandSetR .
  subsort StrandE < StrandSetE .
  subsort StrandN < StrandSetN .
  subsort StrandSet < StrandSetN < StrandSetE < StrandSetR .

  op `[_|_`] : SMsgList-Ee SMsgList-eE -> Strand .
  op `[_|_`] : SMsgListN-Ee SMsgList-eE -> StrandN .
  op `[_|_`] : SMsgListE-Ee SMsgList-eE -> StrandE .
  op `[_|_`] : SMsgListR-Ee SMsgList-eE -> StrandR .
  op mt : -> StrandSet .
  op _&_ : StrandSet StrandSet -> StrandSet [assoc comm id: mt] .
  op _&_ : StrandSetN StrandSetN -> StrandSetN [ditto] .
  op _&_ : StrandSetE StrandSetE -> StrandSetE [ditto] .
  op _&_ : StrandSetR StrandSetR -> StrandSetR [ditto] .

  --- Intruder Knowledge
  sort IntruderKnowledge .
  op mt : -> IntruderKnowledge .
  op inI : Msg -> IntruderKnowledge .
  op nI : Msg -> IntruderKnowledge .
  op _,_ : IntruderKnowledge IntruderKnowledge -> IntruderKnowledge [assoc comm id: mt] .

  --- General state
  sort State .
  op `{_`{_`}`} : StrandSetR IntruderKnowledge -> State .

  --- Variables declaration
  vars IK : IntruderKnowledge .
  vars SS SS1 SS2 : StrandSet .
  vars SSR SSR1 SSR2 : StrandSetR .
  vars SSE SSE1 SSE2 : StrandSetE .
  vars SSN SSN1 SSN2 : StrandSetN .
  var M : Msg .
  vars LeE1 LeE2 LeE3 : SMsgList-eE .
  vars LEe1 LEe2 LEe3 : SMsgList-Ee .
  var LREe1 : SMsgListR-Ee .

  --- Rules
  rl [receive-msg] : { (SSN & [ LREe1 , -(M) | LeE2 ])  { (inI(M) , IK) } } =>
            { (SSN & [ LREe1 | -(M) , LeE2 ])  { (inI(M) , IK) } } [narrowing] .

  rl [send-msg] : { (SS & [ LREe1 , +(M) | LeE2 ])  { (inI(M) , IK) } } =>
            { (SS & [ LREe1 | +(M) , LeE2 ])  { (nI(M) , IK) } } [narrowing] .

  crl [check-EQcontraint] : { (SSE & [ LREe1 , {T1:Msg eq T2:Msg} | LeE2 ])  { IK } } =>
            { (SSE & [ LREe1 | {yes} , LeE2 ])  { IK } } 
  if T1:Msg = T2:Msg [nonexec] .

  crl [check-SMTcontraint] : { (SSR & [ LREe1 , {B:Boolean} | LeE2 ])  { IK } } =>
            { (SSR & [ LREe1 | {B:Boolean} , LeE2 ])  { IK } } 
    if B:Boolean = true [nonexec] .

endm

eof

vu-narrow in BRANDS-CHAUM : {([nilEe, -(commit(NB:Nonce,SB:Secret) @ b : x1:Real,y1:Real,z1:Real,t1:Real -> a : t2:Real), {(t2:Real === t1:Real + dab1:Real) and (dab1:Real > 0/1) and ((dab1:Real * dab1:Real) === (((x1:Real - ax:Real) * (x1:Real - ax:Real)) + ((y1:Real - ay:Real) * (y1:Real - ay:Real))) + ((z1:Real - az:Real) * (z1:Real - az:Real)))}, +(n(a,ra1) @ a : ax:Real,ay:Real,az:Real,t2:Real -> b : t3:Real), -((n(a,ra1) * NB:Nonce) @ b : x3:Real,y3:Real,z3:Real,t3:Real -> a : t4:Real), {(t4:Real === t3:Real + dab3:Real) and (dab3:Real > 0/1) and ((dab3:Real * dab3:Real) === (((x3:Real - ax:Real) * (x3:Real - ax:Real)) + ((y3:Real - ay:Real) * (y3:Real - ay:Real))) + ((z3:Real - az:Real) * (z3:Real - az:Real)))}, {((t4:Real - t2:Real) <= (2/1 * d:Real)) and (d:Real > 0/1)}, -(SB:Secret @ b : x4:Real,y4:Real,z4:Real,t5:Real -> a : t6:Real), {(t6:Real === t5:Real + dab4:Real) and (dab4:Real > 0/1) and ((dab4:Real * dab4:Real) === (((x4:Real - ax:Real) * (x4:Real - ax:Real)) + ((y4:Real - ay:Real) * (y4:Real - ay:Real))) + ((z4:Real - az:Real) * (z4:Real - az:Real)))}, {open(NB:Nonce,SB:Secret,commit(NB:Nonce,SB:Secret)) eq yes}, -(sign(b,(n(a,ra1) * NB:Nonce) ; n(a,ra1)) @ b : x5:Real,y5:Real,z5:Real,t7:Real -> a : t8:Real), {(t8:Real ===  t7:Real + dab5:Real) and (dab5:Real > 0/1) and ((dab5:Real * dab5:Real) === (((x5:Real - ax:Real) * (x5:Real - ax:Real)) + ((y5:Real - ay:Real) * (y5:Real - ay:Real))) + ((z5:Real - az:Real) * (z5:Real - az:Real)))} | nileE] & [nilEe, +(commit(n(b,rb1),s(b,rb2)) @ b : bx:Real,by:Real,bz:Real,t1:Real -> a : t2:Real), -(NA:Nonce @ a : x2:Real,y2:Real,z2:Real,t2:Real -> b : t3:Real), {(t3:Real === t2:Real + dab2:Real) and (dab2:Real > 0/1) and ((dab2:Real * dab2:Real) === (((x2:Real - bx:Real) * (x2:Real - bx:Real)) + ((y2:Real - by:Real) * (y2:Real - by:Real))) + ((z2:Real - bz:Real) * (z2:Real - bz:Real)))}, +((NA:Nonce * n(b,rb1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t4:Real), +(s(b,rb2) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t6:Real), +(sign(b,(NA:Nonce * n(b,rb1)) ; NA:Nonce) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t8:Real) | nileE]) { inI(commit(n(b,rb1),s(b,rb2)) @ b : bx:Real,by:Real,bz:Real,t1:Real -> a : t2:Real), inI(n(a,ra1) @ a : ax:Real,ay:Real,az:Real,t2:Real -> b : t3:Real), inI((n(a,ra1) * n(b,rb1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t4:Real), inI(s(b,rb2) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t6:Real), inI(sign(b,(n(a,ra1) * n(b,rb1)) ; n(a,ra1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t8:Real) } } =>* {([nilEe, -(commit(NB:Nonce,SB:Secret) @ b : x1:Real,y1:Real,z1:Real,t1:Real -> a : t2:Real), {(t2:Real === t1:Real + dab1:Real) and (dab1:Real > 0/1) and ((dab1:Real * dab1:Real) === (((x1:Real - ax:Real) * (x1:Real - ax:Real)) + ((y1:Real - ay:Real) * (y1:Real - ay:Real))) + ((z1:Real - az:Real) * (z1:Real - az:Real)))}, +(n(a,ra1) @ a : ax:Real,ay:Real,az:Real,t2:Real -> b : t3:Real), -((n(a,ra1) * NB:Nonce) @ b : x3:Real,y3:Real,z3:Real,t3:Real -> a : t4:Real), {(t4:Real === t3:Real + dab3:Real) and (dab3:Real > 0/1) and ((dab3:Real * dab3:Real) === (((x3:Real - ax:Real) * (x3:Real - ax:Real)) + ((y3:Real - ay:Real) * (y3:Real - ay:Real))) + ((z3:Real - az:Real) * (z3:Real - az:Real)))}, {((t4:Real - t2:Real) <= (2/1 * d:Real)) and (d:Real > 0/1)}, -(SB:Secret @ b : x4:Real,y4:Real,z4:Real,t5:Real -> a : t6:Real), {(t6:Real === t5:Real + dab4:Real) and (dab4:Real > 0/1) and ((dab4:Real * dab4:Real) === (((x4:Real - ax:Real) * (x4:Real - ax:Real)) + ((y4:Real - ay:Real) * (y4:Real - ay:Real))) + ((z4:Real - az:Real) * (z4:Real - az:Real)))}, {open(NB:Nonce,SB:Secret,commit(NB:Nonce,SB:Secret)) eq yes}, -(sign(b,(n(a,ra1) * NB:Nonce) ; n(a,ra1)) @ b : x5:Real,y5:Real,z5:Real,t7:Real -> a : t8:Real), {(t8:Real ===  t7:Real + dab5:Real) and (dab5:Real > 0/1) and ((dab5:Real * dab5:Real) === (((x5:Real - ax:Real) * (x5:Real - ax:Real)) + ((y5:Real - ay:Real) * (y5:Real - ay:Real))) + ((z5:Real - az:Real) * (z5:Real - az:Real)))} | nileE] & [nilEe, +(commit(n(b,rb1),s(b,rb2)) @ b : bx:Real,by:Real,bz:Real,t1:Real -> a : t2:Real), -(NA:Nonce @ a : x2:Real,y2:Real,z2:Real,t2:Real -> b : t3:Real), {(t3:Real === t2:Real + dab2:Real) and (dab2:Real > 0/1) and ((dab2:Real * dab2:Real) === (((x2:Real - bx:Real) * (x2:Real - bx:Real)) + ((y2:Real - by:Real) * (y2:Real - by:Real))) + ((z2:Real - bz:Real) * (z2:Real - bz:Real)))}, +((NA:Nonce * n(b,rb1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t4:Real), +(s(b,rb2) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t6:Real), +(sign(b,(NA:Nonce * n(b,rb1)) ; NA:Nonce) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t8:Real) | nileE]) { inI(commit(n(b,rb1),s(b,rb2)) @ b : bx:Real,by:Real,bz:Real,t1:Real -> a : t2:Real), inI(n(a,ra1) @ a : ax:Real,ay:Real,az:Real,t2:Real -> b : t3:Real), inI((n(a,ra1) * n(b,rb1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t4:Real), inI(s(b,rb2) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t6:Real), inI(sign(b,(n(a,ra1) * n(b,rb1)) ; n(a,ra1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t8:Real) } } such that (true).Boolean . 
              upTerm(
{(
[nilEe, 
-(commit(NB:Nonce,SB:Secret) @ b : x1:Real,y1:Real,z1:Real,t1:Real -> a : t2:Real), 
{(t2:Real === t1:Real + dab1:Real) and (dab1:Real > 0/1) and 
((dab1:Real * dab1:Real) === (((x1:Real - ax:Real) * (x1:Real - ax:Real)) + 
((y1:Real - ay:Real) * (y1:Real - ay:Real))) + ((z1:Real - az:Real) * (z1:Real - az:Real)))}, 
+(n(a,ra1) @ a : ax:Real,ay:Real,az:Real,t2:Real -> b : t3:Real), 
-((n(a,ra1) * NB:Nonce) @ b : x3:Real,y3:Real,z3:Real,t3:Real -> a : t4:Real), 
{(t4:Real === t3:Real + dab3:Real) and (dab3:Real > 0/1) and 
((dab3:Real * dab3:Real) === (((x3:Real - ax:Real) * (x3:Real - ax:Real)) + 
((y3:Real - ay:Real) * (y3:Real - ay:Real))) + ((z3:Real - az:Real) * (z3:Real - az:Real)))}, 
{((t4:Real - t2:Real) <= (2/1 * d:Real)) and (d:Real > 0/1)}, 
-(SB:Secret @ b : x4:Real,y4:Real,z4:Real,t5:Real -> a : t6:Real), 
{(t6:Real === t5:Real + dab4:Real) and (dab4:Real > 0/1) and 
((dab4:Real * dab4:Real) === (((x4:Real - ax:Real) * (x4:Real - ax:Real)) + 
((y4:Real - ay:Real) * (y4:Real - ay:Real))) + ((z4:Real - az:Real) * (z4:Real - az:Real)))}, 
{open(NB:Nonce,SB:Secret,commit(NB:Nonce,SB:Secret)) eq yes}, 
-(sign(b,(n(a,ra1) * NB:Nonce) ; n(a,ra1)) @ b : x5:Real,y5:Real,z5:Real,t7:Real -> a : t8:Real), 
{(t8:Real ===  t7:Real + dab5:Real) and (dab5:Real > 0/1) and 
((dab5:Real * dab5:Real) === (((x5:Real - ax:Real) * (x5:Real - ax:Real)) + 
((y5:Real - ay:Real) * (y5:Real - ay:Real))) + ((z5:Real - az:Real) * (z5:Real - az:Real)))} 
| nileE] 
& 
[nilEe, 
+(commit(n(b,rb1),s(b,rb2)) @ b : bx:Real,by:Real,bz:Real,t1:Real -> a : t2:Real), 
-(NA:Nonce @ a : x2:Real,y2:Real,z2:Real,t2:Real -> b : t3:Real), 
{(t3:Real === t2:Real + dab2:Real) and (dab2:Real > 0/1) and 
((dab2:Real * dab2:Real) === (((x2:Real - bx:Real) * (x2:Real - bx:Real)) + 
((y2:Real - by:Real) * (y2:Real - by:Real))) + ((z2:Real - bz:Real) * (z2:Real - bz:Real)))}, 
+((NA:Nonce * n(b,rb1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t4:Real), 
+(s(b,rb2) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t6:Real), 
+(sign(b,(NA:Nonce * n(b,rb1)) ; NA:Nonce) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t8:Real) 
| nileE]) 
{ 
inI(commit(n(b,rb1),s(b,rb2)) @ b : bx:Real,by:Real,bz:Real,t1:Real -> a : t2:Real), 
inI(n(a,ra1) @ a : ax:Real,ay:Real,az:Real,t2:Real -> b : t3:Real), 
inI((n(a,ra1) * n(b,rb1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t4:Real), 
inI(s(b,rb2) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t6:Real), 
inI(sign(b,(n(a,ra1) * n(b,rb1)) ; n(a,ra1)) @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t8:Real) 
} }
              '=>*,
              --- FINAL TERM
              upTerm(
              {(
              --- Alice, verifier
              [nilEe | 
                -(commit(NB:Nonce,SB:Secret)                                        @ b : x1:Real,y1:Real,z1:Real,t1:Real -> a : t2:Real), 
                     {(t2:Real === t1:Real + dab1:Real) and (dab1:Real > 0/1) and
                     ((dab1:Real * dab1:Real) === (((x1:Real - ax:Real) * (x1:Real - ax:Real)) + 
                     ((y1:Real - ay:Real) * (y1:Real - ay:Real))) + ((z1:Real - az:Real) * (z1:Real - az:Real)))},      
                +(n(a,ra1)                                            @ a : ax:Real,ay:Real,az:Real,t2:Real -> b : t3:Real),
                -((n(a,ra1) * NB:Nonce)                               @ b : x3:Real,y3:Real,z3:Real,t3:Real -> a : t4:Real), 
                     {(t4:Real === t3:Real + dab3:Real) and (dab3:Real > 0/1) and
                     ((dab3:Real * dab3:Real) === (((x3:Real - ax:Real) * (x3:Real - ax:Real)) + 
                     ((y3:Real - ay:Real) * (y3:Real - ay:Real))) + ((z3:Real - az:Real) * (z3:Real - az:Real)))},      
                     {((t4:Real - t2:Real) <= (2/1 * d:Real)) and (d:Real > 0/1)},
                -(SB:Secret                                           @ b : x4:Real,y4:Real,z4:Real,t5:Real -> a : t6:Real),
                     {(t6:Real === t5:Real + dab4:Real) and (dab4:Real > 0/1) and 
                     ((dab4:Real * dab4:Real) === (((x4:Real - ax:Real) * (x4:Real - ax:Real)) + 
                     ((y4:Real - ay:Real) * (y4:Real - ay:Real))) + ((z4:Real - az:Real) * (z4:Real - az:Real)))}, 
                     {yes}, 
                -(sign(b,(n(a,ra1) * NB:Nonce) ; n(a,ra1))            @ b : x5:Real,y5:Real,z5:Real,t7:Real -> a : t8:Real), 
                     {(t8:Real ===  t7:Real + dab5:Real) and (dab5:Real > 0/1) and
                     ((dab5:Real * dab5:Real) === (((x5:Real - ax:Real) * (x5:Real - ax:Real)) + 
                     ((y5:Real - ay:Real) * (y5:Real - ay:Real))) + ((z5:Real - az:Real) * (z5:Real - az:Real)))}, 
              nileE]
              &
              --- Bob, prover
              [nilEe | 
                +(commit(n(b,rb1),s(b,rb2))                           @ b : bx:Real,by:Real,bz:Real,t1:Real -> a : t2:Real),
                -(NA:Nonce                                            @ a : x2:Real,y2:Real,z2:Real,t2:Real -> b : t3:Real),
                     {(t3:Real === t2:Real + dab2:Real) and (dab2:Real > 0/1) and
                     ((dab2:Real * dab2:Real) === (((x2:Real - bx:Real) * (x2:Real - bx:Real)) + 
                     ((y2:Real - by:Real) * (y2:Real - by:Real))) + ((z2:Real - bz:Real) * (z2:Real - bz:Real)))},
                +((NA:Nonce * n(b,rb1))                               @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t4:Real),
                +(s(b,rb2)                                            @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t6:Real),
                +(sign(b,(NA:Nonce * n(b,rb1)) ; NA:Nonce)            @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t8:Real),                                     
              
              nileE]) 
              --- Intruder Knowledge
              { 
                nI(commit(n(b,rb1),s(b,rb2))                          @ b : bx:Real,by:Real,bz:Real,t1:Real -> a : t2:Real),
                nI(n(a,ra1)                                           @ a : ax:Real,ay:Real,az:Real,t2:Real -> b : t3:Real),
                nI((n(a,ra1) * n(b,rb1))                              @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t4:Real),
                nI(s(b,rb2)                                           @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t6:Real),
                nI(sign(b,(n(a,ra1) * n(b,rb1)) ; n(a,ra1))           @ b : bx:Real,by:Real,bz:Real,t3:Real -> a : t8:Real) 
              } 
              })


[NL:IntegerList, N:Integer] null [NL':IntegerList, N':Integer] =>* C:Channel such that (true).Boolean .

{canonical} vu-narrow in BRANDS-CHAUM : [NL:IntegerList, N:Integer] null [NL':IntegerList, N':Integer] =>* C:Channel such that (true).Boolean .
